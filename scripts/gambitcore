#!/usr/bin/env python3

import argparse
import tempfile
import os
import json
import numpy as np
import logging
import sys
import pandas as pd
sys.path.append('../')
sys.path.append('./')
from gambitcore.__version__ import __version__
from gambitcore.DatabaseQueries import DatabaseQueries
from gambitcore.GambitDatabase import GambitDatabase
from gambitcore.SpeciesKmers import SpeciesKmers
from gambit.sigs import load_signatures

def parse_arguments():
    parser = argparse.ArgumentParser(
        description='How complete is an assembly compared to the core genome of its species?',
        usage='gambitcore [options]',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    # Required input files
    parser.add_argument('gambit_directory', help='A directory containing GAMBIT files (database and signatures)', type=str)
    parser.add_argument('fasta_filenames', help='A list of FASTA files of genomes', type=str, nargs='+')

    # Optional input parameters
    parser.add_argument('--concise', '-e', action='store_true', help='concise output', default=False)
    parser.add_argument('--cpus', '-p', help='Number of cpus to use', type=int, default=1)
    # You can change these 
    parser.add_argument('--max_species_genomes', '-t', help='Max number of genomes in a species to consider, ignore all others above this', default=100000, type=int)
    parser.add_argument('--core_proportion', '-c', help='Proportion of genomes a kmer must be in for a species to be considered core', default=0.98, type=float)

    # Never change these. They must correspond to the values used in the database
    parser.add_argument('--kmer',	 help='Length of the k-mer to use. Dont change these, must match database parameters.', type=int, default = 11)
    parser.add_argument('--kmer_prefix',  help='Kmer prefix. Dont change these, must match database parameters.', default = 'ATGAC', type=str)

    # Dont change this - its a placeholder to allow for future compression.
    parser.add_argument('--num_genomes_per_species', '-r', help='Number of genomes to keep for a species (0 means keep all). Dont change this.', type=int, default=1)

    # Output
    parser.add_argument('--verbose', '-v', action='store_true', help='Turn on verbose output', default=False)

    # Version
    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')

    return parser.parse_args()

def run_gambit_core_check(gambit_directory, fasta_filename, cpus):
    closest_accession = None
    closest_distance = None
    rank = "Unknown"

    with tempfile.TemporaryDirectory() as temp_dir:
        gambit_output = os.path.join(temp_dir, 'gambit_output.json')
        os.system(f"gambit -d {gambit_directory} query --no-progress -o {gambit_output} -c {cpus} -f json {fasta_filename}")

        with open(gambit_output, 'r') as f:
            data = json.load(f)
            item = data.get('items', [{}])[0]

            predicted_taxon = item.get('predicted_taxon')
            if predicted_taxon:
                rank = predicted_taxon.get('rank')
            else:
                logging.warning(f"No predicted taxon found for: {fasta_filename}")

            closest_genomes = item.get('closest_genomes')
            if closest_genomes:
                closest_genome = closest_genomes[0]
                closest_accession = closest_genome.get('genome', {}).get('key')
                closest_distance = closest_genome.get('distance')
            else:
                logging.warning(f"No closest genomes found for: {fasta_filename}")

    logging.info(f"Filename: {fasta_filename}")
    logging.info(f"Closest accession: {closest_accession}")
    logging.info(f"Closest distance: {closest_distance}")
    logging.info(f"Rank: {rank}")
    return closest_accession, closest_distance, rank

def intersection_kmers(core_kmers, genome_kmers):
    return np.intersect1d(core_kmers, genome_kmers)

def construct_extended_output(interection_of_kmers, core_kmers, closest_accession, closest_distance, fasta_filename, species, species_kmers, genome_kmers):

    if species == "Species could not be identified, skipping core genome assessment":
        output_values = [fasta_filename, species,  "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA"]
        output_string = "\t".join(output_values)
    else:
        completeness = len(interection_of_kmers) / len(core_kmers) * 100
        assembly_qc = species_kmers.quality_control_rag_for_assembly(len(genome_kmers))

        output_values = [fasta_filename, species,  f"{completeness:.2f}%", f"({len(interection_of_kmers)}/{len(core_kmers)})", str(closest_accession), str(f"{closest_distance:.4f}"), str(len(genome_kmers)),   str(round(species_kmers.genome_kmers_mean)), str(round(species_kmers.genome_kmers_std)), str(assembly_qc)]
        output_string = "\t".join(output_values)

        logging.info(f"Filename: {fasta_filename}")
        logging.info(f"Closest accession: {closest_accession}")
        logging.info(f"Closest distance: {closest_distance}")
        logging.info(f"Number of intersection kmers: {len(interection_of_kmers)}")
        logging.info(f"Percentage of intersection kmers: {len(interection_of_kmers) / len(core_kmers) * 100}")
        logging.info(f"Number of core kmers: {len(core_kmers)}")
    return output_string

def construct_consise_output(interection_of_kmers, core_kmers, fasta_filename, species):
    if species == "Species could not be identified, skipping core genome assessment":
        return f"{fasta_filename}\t{species}\tNA"
    completeness = len(interection_of_kmers) / len(core_kmers) * 100
    return f"{fasta_filename}\t{species}\t{completeness:.2f}%"

def calculate_core(core_proportion, max_species_genomes, num_genomes_per_species, species,genome_accs, src):
    num_genomes = len(genome_accs)

    # If you have large numbers of genomes for a species, you dont really need them all for the core calculation and can ignore the rest
    if num_genomes > max_species_genomes:
        genome_accs = genome_accs[:max_species_genomes]
        num_genomes = len(genome_accs)

    # get the indices of the genbank accessions we want to keep
    in_gidxs = np.flatnonzero(np.in1d(src.ids,genome_accs))
    filtered_src_ids = src.ids[in_gidxs]
    filtered_src = src[in_gidxs]

    core_src = []
    core_src_ids = []

    data = np.array([])
    genome_kmers = np.array([])

    for item in filtered_src:
        genome_kmers = np.append(genome_kmers, len(item))
        data = np.append(data, item)

    data_pd = pd.Series(data)
    kmer_counts  = data_pd.value_counts()
    species_kmers = SpeciesKmers(genome_kmers, species)

    core_kmers_counts = kmer_counts[kmer_counts >= round(num_genomes*core_proportion)]
    core_kmers = core_kmers_counts.keys().astype(int)

    logging.info("Core kmers for "+ species + ": " + str(len(core_kmers)))

    num_genomes_per_species = num_genomes_per_species_threshold(num_genomes_per_species, filtered_src)
    index_of_species_to_consider = min(num_genomes_per_species, len(filtered_src))

    # Add each genomes kmers which are considered core to a temp array   
    for i in range(index_of_species_to_consider):
        core_src.append(filtered_src[i][np.in1d(filtered_src[i],core_kmers)])
        core_src_ids.append(filtered_src_ids[i])

    return core_src, species_kmers

def num_genomes_per_species_threshold(num_genomes_per_species, filtered_src):
    num_genomes_per_species = num_genomes_per_species
    if num_genomes_per_species == 0:
        num_genomes_per_species = len(filtered_src)

    return num_genomes_per_species

# calculate mean kmers for species in a genome (std dev)
# calculate no kmers in input fasta 
# note divergence from size

def main():
    options = parse_arguments()

    if options.verbose:
        logging.basicConfig(level=logging.INFO)

    gambit_database_obj = GambitDatabase(options.gambit_directory)
    database_filename, signatures_filename = gambit_database_obj.find_gambit_files()
    if database_filename is None or  signatures_filename  is None:
        raise Exception("Could not find database or signatures file in GAMBIT directory")
    
    # print headers
    if options.concise:
        print("Filename\tSpecies\tCompleteness (%)")
    else:
        print("Filename\tSpecies\tCompleteness (%)\tAssembly Core/species Core\tClosest accession\tClosest distance\tAssembly Kmers\tSpecies Kmers Mean\tSpecies Kmers Std Dev\tAssembly QC")

    for fasta_filename in options.fasta_filenames:
        logging.info(f"Processing {fasta_filename}")
        closest_accession, closest_distance, rank = run_gambit_core_check(options.gambit_directory, fasta_filename, options.cpus)

        # check if a species-level is being made. Options: genus, species and species group
        if 'species' in rank:

            # create a core just of that species
            db_queries = DatabaseQueries(database_filename)
            species = db_queries.get_species_from_genomes_accession_from_db(closest_accession)
            all_species_genome_accessions = db_queries.get_all_genomes_for_a_species_from_db(species)

            # check that the species is a key in the dictionary
            if species not in all_species_genome_accessions:
                raise Exception(f"Could not find species {species} in database")
            genome_accessions = all_species_genome_accessions[species]
            
            core_kmers = []
            species_kmers = None
            with load_signatures(signatures_filename) as src:
                core_kmers, species_kmers = calculate_core(options.core_proportion, options.max_species_genomes, options.num_genomes_per_species, species, genome_accessions, src)
            
            genome_kmers = gambit_database_obj.get_kmers_from_fasta(fasta_filename, options.kmer, options.kmer_prefix, options.cpus)
            interection_of_kmers = intersection_kmers(core_kmers[0], genome_kmers)

            if options.concise:
                print(construct_consise_output(interection_of_kmers, core_kmers[0], fasta_filename, species))
            else:
                print(construct_extended_output(interection_of_kmers, core_kmers[0], closest_accession, closest_distance, fasta_filename, species, species_kmers, genome_kmers))

        else:
            logging.info(f"Skipping {fasta_filename} as it is not a species-level call")

            if options.concise:
                print(construct_consise_output(0, 0, fasta_filename, "Species could not be identified, skipping core genome assessment"))
            else:
                print(construct_extended_output(0, 0, 0, 0, fasta_filename, "Species could not be identified, skipping core genome assessment", 0, 0))

if __name__ == "__main__":
    main()
